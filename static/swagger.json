{
  "swagger": "2.0",
  "info": {
    "description": "This is a model of an exchange of assets. It is designed to trade simple assets as stock, currencies and commodities. ",
    "version": "1.0.0",
    "title": "Exchange",
    "contact": {
      "email": "igor.vieira433@gmail.com"
    },
    "license": {
      "name": "MIT license - Open Source",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:5000",
  "basePath": "/",
  "tags": [
    {
      "name": "user",
      "description": "User related endpoints"
    },
    {
      "name": "stock",
      "description": "Assets traded in the exchange"
    },
    {
      "name": "offer",
      "description": "Offers emitted"
    },
    {
      "name": "trade",
      "description": "trades executed in the exchange"
    },
    {
      "name": "test",
      "description": "endpoints for testing"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get one or all users",
        "description": "If you send a user ID (or name), the request will return the specific user with the given identifier. If nothing is send in the request, it returns automatically all users in the exchange.",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Id or name to search for a especific user",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Wrong arguments"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a user to the exchange",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to added",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User already exists"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserDeleted"
            }
          },
          "400": {
            "description": "Invalid id value"
          }
        }
      }
    },
    "/stocks": {
      "get": {
        "tags": [
          "stock"
        ],
        "summary": "Get one or all stocks",
        "description": "If you send a stock ID (or label), the request will return the specific stock with the given identifier. If nothing is send in the request, it returns automatically all stocks in the exchange.",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Label or id of a given stock",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Stock"
            }
          },
          "400": {
            "description": "Invalid identifier supplied"
          },
          "404": {
            "description": "Stock not found"
          }
        }
      }
    },
    "/offers": {
      "get": {
        "tags": [
          "offer"
        ],
        "summary": "Get one or all offers",
        "description": "If you send a stock ID (or label), the request will return the specific stock with the given identifier. If nothing is send in the request, it returns automatically all stocks in the exchange.",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Identifier to search for a especific offer",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          },
          "400": {
            "description": "Wrong parameters"
          },
          "404": {
            "description": "Offer not found"
          }
        }
      },
      "post": {
        "tags": [
          "offer"
        ],
        "summary": "Add an offer to the exchange",
        "description": "",
        "operationId": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Offer object that needs to added",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OfferBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          },
          "400": {
            "description": "Wrong parameters"
          },
          "404": {
            "description": "Offer not found"
          }
        }
      }
    },
    "/offers/{id}": {
      "delete": {
        "tags": [
          "offer"
        ],
        "summary": "Delete an offer",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of offer to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          },
          "400": {
            "description": "Wrong parameters"
          },
          "404": {
            "description": "Offer not found"
          }
        }
      }
    },
    "/trades": {
      "get": {
        "tags": [
          "trade"
        ],
        "summary": "Get one or all trades",
        "description": "If you send a trade ID (or other), the request will return the specific trade with the given identifier. If nothing is send in the request, it returns automatically all trades in the exchange.",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Identifier to search for a especific trade",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Trade"
            }
          }
        }
      }
    },
    "/test": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Test the functioning of the exchange",
        "description": "Many offers are emitted to evaluate if the exchange is working properly",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/all": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get all models",
        "description": "It returns all models. That means, all offers, users, stocks and trades",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "UserDeleted": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "UserBody": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Offer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "side": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "quantity": {
          "type": "integer"
        },
        "creation": {
          "type": "string"
        },
        "executed": {
          "type": "integer"
        }
      }
    },
    "OfferBody": {
      "type": "object",
      "required": [
        "stock",
        "user",
        "side",
        "price",
        "quantity"
      ],
      "properties": {
        "stock": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string"
            }
          }
        },
        "user": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "side": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "quantity": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "default": "market"
        }
      }
    },
    "Trade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "b_offer": {
          "$ref": "#/definitions/Offer"
        },
        "s_offer": {
          "$ref": "#/definitions/Offer"
        },
        "price": {
          "type": "number"
        },
        "quantity": {
          "type": "integer"
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}